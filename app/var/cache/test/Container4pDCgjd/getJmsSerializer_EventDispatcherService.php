<?php

namespace Container4pDCgjd;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getJmsSerializer_EventDispatcherService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private 'jms_serializer.event_dispatcher' shared service.
     *
     * @return \JMS\SerializerBundle\Debug\TraceableEventDispatcher
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/jms/serializer/src/EventDispatcher/EventDispatcherInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/jms/serializer/src/EventDispatcher/EventDispatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/jms/serializer/src/EventDispatcher/LazyEventDispatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/jms/serializer-bundle/Debug/TraceableEventDispatcher.php';

        $container->privates['jms_serializer.event_dispatcher'] = $instance = new \JMS\SerializerBundle\Debug\TraceableEventDispatcher(($container->privates['jms_serializer.event_dispatcher.service_locator'] ?? $container->load('getJmsSerializer_EventDispatcher_ServiceLocatorService')));

        $instance->addListener('serializer.pre_serialize', ['jms_serializer.stopwatch_subscriber', 'onPreSerialize'], NULL, NULL, NULL);
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.traceable_runs_listener', 'saveRunInfo'], NULL, NULL, NULL);
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.doctrine_proxy_subscriber', 'onPreSerializeTypedProxy'], NULL, NULL, 'Doctrine\\Persistence\\Proxy');
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.doctrine_proxy_subscriber', 'onPreSerializeTypedProxy'], NULL, NULL, 'Doctrine\\Common\\Persistence\\Proxy');
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.doctrine_proxy_subscriber', 'onPreSerialize'], NULL, NULL, 'Doctrine\\ORM\\PersistentCollection');
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.doctrine_proxy_subscriber', 'onPreSerialize'], NULL, NULL, 'Doctrine\\ODM\\MongoDB\\PersistentCollection');
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.doctrine_proxy_subscriber', 'onPreSerialize'], NULL, NULL, 'Doctrine\\ODM\\PHPCR\\PersistentCollection');
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.doctrine_proxy_subscriber', 'onPreSerialize'], NULL, NULL, 'Doctrine\\Persistence\\Proxy');
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.doctrine_proxy_subscriber', 'onPreSerialize'], NULL, NULL, 'Doctrine\\Common\\Persistence\\Proxy');
        $instance->addListener('serializer.pre_serialize', ['jms_serializer.doctrine_proxy_subscriber', 'onPreSerialize'], NULL, NULL, 'ProxyManager\\Proxy\\LazyLoadingInterface');
        $instance->addListener('serializer.pre_deserialize', ['jms_serializer.traceable_runs_listener', 'saveRunInfo'], NULL, NULL, NULL);
        $instance->addListener('serializer.post_serialize', ['jms_serializer.stopwatch_subscriber', 'onPostSerialize'], NULL, NULL, NULL);

        return $instance;
    }
}
